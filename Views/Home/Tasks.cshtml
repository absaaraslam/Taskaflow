@{
	ViewData["Title"] = "Current Tasks";
}

<style>
	/* Container Styles */
	.container {
		padding-top: 30px; /* Add some top padding */
	}

	/* Title Styles */
	.display-4,
	.display-6 {
		color: #fff; /* White text */
		text-align: center; /* Center align titles */
	}

	.display-4 {
		margin-bottom: 20px; /* Add some space after main title */
	}

	/* Form Styles */
	#form-main {
		width: 100%; /* Full width */
		margin: 0 auto; /* Center form horizontally */
		padding: 30px; /* Add some padding */
		border-radius: 5px; /* Rounded corners */
		/* background-color: #f0f0f0; /* Light gray background */ */
	}

	.form-group {
		margin-bottom: 20px; /* Add some space between form elements */
	}

	label {
		color:aliceblue; /* Darker text for labels */
		font-weight: bold; /* Bold labels */
	}

	.form-control {
		border: 1px solid #ccc; /* Light border for input fields */
		border-radius: 4px; /* Rounded corners for input fields */
	}

		.form-control:focus {
			border-color: #3498db; /* Blue border on focus */
		}

	textarea {
		resize: vertical; /* Allow resizing textarea height */
	}

	/* Button Styles */
	.btn-primary {
		background-color: #3498db; /* Blue button background */
		color: #fff; /* White button text */
		border-color: #3498db; /* Blue button border */
		border-radius: 4px; /* Rounded corners for button */
		padding: 10px 20px; /* Adjust button padding */
		font-weight: bold; /* Bold button text */
	}

		.btn-primary:hover {
			background-color: #2980b9; /* Darker blue on hover */
		}

	/* Table Styles */
	table {
		width: 100%;
		border-collapse: collapse; /* Remove table borders */
	}

	th,
	td {
		padding: 10px; /* Add padding to table cells */
		border: 1px solid #ddd; /* Light border for table cells */
	}

	th {
		background-color: #eee; /* Light gray background for table headers */
	}

	.text-white {
		color: #fff; /* White text for specific elements */
	}

	.badge {
		font-size: 14px; /* Adjust badge font size */
		padding: 5px 10px; /* Adjust badge padding */
	}

	.badge-success {
		background-color: #4caf50; /* Green color for completed tasks */
	}

	.badge-secondary {
		background-color: #6c757d; /* Gray color for pending tasks */
	}
</style>

<div class="text-center">
	<h1 class="display-4 ">Task Management</h1>
	<h2 class="display-6 text-opacity-50">Create Tasks</h2>
</div>

<div class="container mt-6">
	<div id="form-main">
		<div id="form-div">
			<form id="createTaskForm">
				<div class="form-group">
					<label for="itemName">Task Title:</label>
					<input type="text" class="form-control" id="itemName" name="itemName" placeholder="Enter Task Title" required>
				</div>
				<div class="form-group">
					<label for="itemDesc">Task Description:</label>
					<textarea class="form-control" id="itemDesc" name="itemDesc" placeholder="Enter Task Description" rows="3" required></textarea>
				</div>
				<div class="form-group">
					<label for="dueDate">Due Date:</label>
					<input type="date" class="form-control" id="dueDate" name="dueDate">
				</div>
				<div class="form-group">
					<label for="category">Category:</label>
					<select class="form-control" id="category" name="category" required>
						<option value="" disabled selected>Select a Category</option>
					</select>
				</div>
				<button type="submit" class="btn btn-primary align-self-center" id="addItemBtn">Add Task</button>
			</form>
		</div>
	</div>

	<br />
	
	<h2 class="display-6 text-white text-opacity-50">No Of Tasks</h2>
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th class="text-white" scope="col">ID</th>
				<th class="text-white" scope="col">Task Title</th>
				<th class="text-white" scope="col">Description</th>
				<th class="text-white" scope="col">Due Date</th>
				<th class="text-white" scope="col">Completed</th>
			</tr>
		</thead>
		<tbody id="tasksList">
		</tbody>
	</table>
</div>

@section Scripts {
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const categorySelect = document.getElementById('category');
			const tasksList = document.getElementById('tasksList');
			const createTaskForm = document.getElementById('createTaskForm');

			fetch('http://localhost:5194/api/Categories/GetCategories')
				.then(response => response.json())
				.then(data => {
					data.forEach(category => {
						const option = document.createElement('option');
						option.value = category.categoryId;
						option.text = category.categoryName;
						categorySelect.appendChild(option);
					});
				});

			fetch('http://localhost:5194/api/Tasks/GetTasks')
				.then(response => response.json())
				.then(data => {
					data.forEach(task => {
						const newRow = `<tr>
							  <td class='text-white'>${task.taskId}</td>
							  <td class='text-white'>${task.title}</td>
							  <td class='text-white'>${task.description}</td>
							  <td class='text-white'>${task.dueDate ? task.dueDate : ''}</td>
					  <td>
						<span class="badge bg-${task.completed ? 'success' : 'secondary'}">${task.completed ? 'Completed' : 'Pending'}</span>
					  </td>
					</tr>`;
						tasksList.innerHTML += newRow;
					});
				});

			createTaskForm.addEventListener('submit', (event) => {
				event.preventDefault(); // Prevent default form submission
				alert('aya idhar')
				const itemName = document.getElementById('itemName').value;
				const itemDesc = document.getElementById('itemDesc').value;
				const dueDate = document.getElementById('dueDate').value;
				const categoryId = document.getElementById('category').value;

				const taskData = {
					title: itemName,
					description: itemDesc,
					dueDate: dueDate,
					categoryId: categoryId,
				};

				// Send POST request to create the task
				fetch('http://localhost:5194/api/Tasks/PostTasks', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(taskData)
				})
					.then(response => response.json())
					.then(data => {
						if (response.ok) {
							console.log("Task created successfully:", data);
							createTaskForm.reset(); // Clear form fields after successful submission
						} else {
							console.error("Error creating task:", response.statusText);
							// Display an error message to the user
						}
					});
			});
		});
	</script>
}